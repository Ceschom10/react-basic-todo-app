{"version":3,"sources":["assets/image/logo.svg","redux/constants/index.js","redux/reducers/appReducer.js","redux/reducers/index.js","redux/store/index.js","redux/selectors/index.js","redux/actions/index.js","utils/index.js","containers/Item/layout.js","containers/Item/index.js","containers/List/layout.js","containers/List/index.js","containers/Create/layout.js","containers/Create/index.js","containers/Edit/layout.js","containers/Edit/index.js","components/SidePanel.js","containers/Main/layout.js","containers/Main/index.js","components/NotFound.js","components/Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ADD_ITEM","UPDATE_ITEM","REMOVE_ITEM","SET_SELECTED_ITEM_ID","SET_RENDER_CREATE","SET_RENDER_EDIT","CLOSE_PANEL","CLEAR_LIST","TOGGLE_ALL","OPEN_CREATE_PANEL","OPEN_EDIT_PANEL","initialState","fromJS","items","id","name","description","type","createdAt","isCompleted","renderCreate","renderEdit","selectedItemId","getItemIndex","state","entity","itemId","get","findIndex","item","appReducer","action","ACTIONS","update","unshift","payload","itemIndex","updateIn","merge","deleteIn","set","List","map","bool","reducers","combineReducers","app","form","formReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","getAllItems","getIn","getSelectedItemId","getSelectedItem","find","getRenderCreate","getRenderEdit","formSubmit","updateItem","addItem","uuid","Date","now","taskTypes","value","label","Layout","props","onRemoveItem","handleChange","handleBlur","handleKeyDown","handleCheck","onOpenEditPanel","className","placeholder","onChange","onBlur","onKeyDown","replace","match","toUpperCase","moment","format","checked","onClick","Item","e","setState","target","handleUpdate","onUpdateItem","keyCode","prevState","prevProps","this","handleSubmit","Component","actions","connect","checkedAll","rest","key","onToggleAll","pristine","reset","submitting","onSubmit","autoComplete","htmlFor","component","disabled","option","cols","rows","Form","reduxForm","values","dispatch","destroyOnUnmount","ConnectedForm","initialValues","SidePanel","handleClose","children","handleInputChange","onClearList","onClosePanel","onOpenCreatePanel","Create","Edit","Main","preventDefault","trim","newItem","onAddItem","NotFound","Router","path","exact","to","App","src","logo","alt","href","rel","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1e4c90c7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\n * action-types\n */\n\nexport const FORM_SUBMIT = 'app/MainApplication/FORM_SUBMIT';\n\nexport const ADD_ITEM = 'app/MainApplication/ADD_ITEM';\n\nexport const UPDATE_ITEM = 'app/MainApplication/UPDATE_ITEM';\n\nexport const REMOVE_ITEM = 'app/MainApplication/REMOVE_ITEM';\n\nexport const SET_SELECTED_ITEM_ID = 'app/MainApplication/SET_SELECTED_ITEM_ID';\n\nexport const SET_RENDER_CREATE = 'app/MainApplication/SET_RENDER_CREATE';\n\nexport const SET_RENDER_EDIT = 'app/MainApplication/SET_RENDER_EDIT';\n\nexport const CLOSE_PANEL = 'app/MainApplication/CLOSE_PANEL';\n\nexport const CLEAR_LIST = 'app/MainApplication/CLEAR_LIST';\n\nexport const TOGGLE_ALL = 'app/MainApplication/TOGGLE_ALL';\n\nexport const OPEN_CREATE_PANEL = 'app/MainApplication/OPEN_CREATE_PANEL';\n\nexport const OPEN_EDIT_PANEL = 'app/MainApplication/OPEN_EDIT_PANEL';\n","import { fromJS, List } from 'immutable';\nimport * as ACTIONS from '../constants';\n\nconst initialState = fromJS({\n  items: [\n    {\n      id: '6b7d54a2-caff-11ea-87d0-0242ac130003',\n      name: 'Learn how to code',\n      description: 'Spend two hours a day coding',\n      type: 'dev-task',\n      createdAt: 1578831166000,\n      isCompleted: false,\n    },\n    {\n      id: '8e0f82ec-caff-11ea-87d0-0242ac130003',\n      name: 'Learn how to cook',\n      description: 'Stop eating cereal all day',\n      type: 'daily-task',\n      createdAt: 1574104366000,\n      isCompleted: false,\n    },\n    {\n      id: 'b033cb6e-ccb0-11ea-87d0-0242ac130003',\n      name: 'Take out the trash',\n      description: \"Do at least that for God's sake\",\n      type: 'daily-task',\n      createdAt: 1549069931000,\n      isCompleted: true,\n    },\n    {\n      id: '66d8e256-d20a-11ea-87d0-0242ac130003',\n      name: 'Wash the dishes',\n      description: 'Or you can eat from the can, your call',\n      type: 'daily-task',\n      createdAt: 1594455449000,\n      isCompleted: false,\n    },\n  ],\n  renderCreate: false,\n  renderEdit: false,\n  selectedItemId: '',\n});\n\nconst getItemIndex = (state, entity, itemId) => state.get(entity).findIndex(item => item.get('id') === itemId);\n\nfunction appReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.ADD_ITEM: {\n      return state.update('items', items => items.unshift(action.payload));\n    }\n\n    case ACTIONS.UPDATE_ITEM: {\n      const itemIndex = getItemIndex(state, 'items', action.id);\n      return state.updateIn(['items', itemIndex], item => item.merge(action.payload));\n    }\n\n    case ACTIONS.REMOVE_ITEM: {\n      const itemIndex = getItemIndex(state, 'items', action.id);\n      if (state.get('selectedItemId') === action.id) {\n        return state.deleteIn(['items', itemIndex]).set('renderEdit', false).set('selectedItemId', '');\n      }\n      return state.deleteIn(['items', itemIndex]);\n    }\n\n    case ACTIONS.SET_SELECTED_ITEM_ID: {\n      return state.set('selectedItemId', action.id);\n    }\n\n    case ACTIONS.SET_RENDER_CREATE: {\n      return state.set('renderCreate', action.payload);\n    }\n\n    case ACTIONS.SET_RENDER_EDIT: {\n      return state.set('renderEdit', action.payload);\n    }\n\n    case ACTIONS.OPEN_CREATE_PANEL: {\n      return state.set('renderCreate', true).set('renderEdit', false).set('selectedItemId', '');\n    }\n\n    case ACTIONS.OPEN_EDIT_PANEL: {\n      return state.set('renderCreate', false).set('renderEdit', true).set('selectedItemId', action.id);\n    }\n\n    case ACTIONS.CLOSE_PANEL: {\n      return state.set('renderCreate', false).set('renderEdit', false).set('selectedItemId', '');\n    }\n\n    case ACTIONS.CLEAR_LIST: {\n      return state.set('items', new List([])).set('renderEdit', false).set('selectedItemId', '');\n    }\n\n    case ACTIONS.TOGGLE_ALL: {\n      return state.update('items', items => items.map(item => item.set('isCompleted', action.bool)));\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default appReducer;\n","import { combineReducers } from 'redux-immutable';\nimport { reducer as formReducer } from 'redux-form/immutable';\n\nimport appReducer from './appReducer';\n\nconst reducers = combineReducers({\n  app: appReducer,\n  // you have to pass formReducer under 'form' key,\n  // for custom keys look up the docs for 'getFormState'\n  form: formReducer,\n});\n\nexport default reducers;\n","import { createStore } from 'redux';\nimport reducers from '../reducers';\n\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n/* eslint-enable */\n\nexport default store;\n","import { List } from 'immutable';\n\nexport const getAllItems = state => state.getIn(['app', 'items'], new List([]));\n\nexport const getItem = (state, id) => state.getIn(['app', 'items'], new List([])).find(item => item.get('id') === id);\n\nexport const getSelectedItemId = state => state.getIn(['app', 'selectedItemId']);\n\nexport const getSelectedItem = state =>\n  state.getIn(['app', 'items'], new List([])).find(item => item.get('id') === getSelectedItemId(state));\n\nexport const getRenderCreate = state => state.getIn(['app', 'renderCreate'], false);\n\nexport const getRenderEdit = state => state.getIn(['app', 'renderEdit'], false);\n","import { v1 as uuid } from 'uuid';\nimport * as ACTIONS from '../constants';\n\nexport function formSubmit(action, payload) {\n  if (action === 'edit') {\n    return updateItem(payload.get('id'), payload);\n  }\n\n  return addItem(payload.set('id', uuid()).set('createdAt', Date.now()).set('isCompleted', false));\n}\n\nexport function addItem(payload) {\n  return {\n    type: ACTIONS.ADD_ITEM,\n    payload,\n  };\n}\n\nexport function updateItem(id, payload) {\n  return {\n    type: ACTIONS.UPDATE_ITEM,\n    id,\n    payload,\n  };\n}\n\nexport function removeItem(id) {\n  return {\n    type: ACTIONS.REMOVE_ITEM,\n    id,\n  };\n}\n\nexport function setSelectedItemId(id) {\n  return {\n    type: ACTIONS.SET_SELECTED_ITEM_ID,\n    id,\n  };\n}\n\nexport function setRenderCreate(payload) {\n  return {\n    type: ACTIONS.SET_RENDER_CREATE,\n    payload,\n  };\n}\n\nexport function setRenderEdit(payload) {\n  return {\n    type: ACTIONS.SET_RENDER_EDIT,\n    payload,\n  };\n}\n\nexport function closePanel() {\n  return {\n    type: ACTIONS.CLOSE_PANEL,\n  };\n}\n\nexport function clearList() {\n  return {\n    type: ACTIONS.CLEAR_LIST,\n  };\n}\n\nexport function toggleAll(bool) {\n  return {\n    type: ACTIONS.TOGGLE_ALL,\n    bool,\n  };\n}\n\nexport function openCreatePanel() {\n  return {\n    type: ACTIONS.OPEN_CREATE_PANEL,\n  };\n}\n\nexport function openEditPanel(id) {\n  return {\n    type: ACTIONS.OPEN_EDIT_PANEL,\n    id,\n  };\n}\n","export function humanize(str) {\n  return str\n    .replace(/^[\\s_]+|[\\s_]+$/g, '')\n    .replace(/[_\\s]+/g, ' ')\n    .replace(/[-\\s]+/g, ' ')\n    .replace(/^[a-z]/, match => match.toUpperCase());\n}\n\nexport const taskTypes = [\n  { value: 'dev-task', label: 'Development task' },\n  { value: 'daily-task', label: 'Daily task' },\n  { value: 'routine', label: 'Routine' },\n  { value: 'incidentals', label: 'Incidentals' },\n  { value: 'projects', label: 'Projects' },\n  { value: 'problems', label: 'Problems' },\n  { value: 'researching', label: 'Researching' },\n  { value: 'testing', label: 'Testing' },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport moment from 'moment';\nimport { humanize } from '../../utils';\nfunction Layout(props) {\n  const {\n    item,\n    name,\n    isCompleted,\n    onRemoveItem,\n    handleChange,\n    handleBlur,\n    handleKeyDown,\n    handleCheck,\n    onOpenEditPanel,\n  } = props;\n\n  return (\n    <div className=\"rTableRow\">\n      <div className=\"rTableCell\">\n        <span>{item.get('id')}</span>\n      </div>\n      <div className=\"rTableCell\">\n        <span>\n          {isCompleted ? (\n            <span className=\"item-completed\">{item.get('name')}</span>\n          ) : (\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter a task name...\"\n              value={name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              onKeyDown={handleKeyDown}\n            />\n          )}\n        </span>\n      </div>\n      <div className=\"rTableCell\">\n        <span>{humanize(item.get('type'))}</span>\n      </div>\n      <div className=\"rTableCell\">\n        <span>{item.get('description')}</span>\n      </div>\n      <div className=\"rTableCell\">\n        <span>{moment(item.get('createdAt')).format('lll')}</span>\n      </div>\n      <div className=\"rTableCell rTableAction\">\n        <span>\n          <input type=\"checkbox\" name=\"isCompleted\" checked={isCompleted} onChange={handleCheck} />\n        </span>\n      </div>\n      <div className=\"rTableCell rTableAction\">\n        <button type=\"button\" onClick={() => onOpenEditPanel(item.get('id'))}>\n          Edit\n        </button>\n        <button type=\"button\" onClick={() => onRemoveItem(item.get('id'))}>\n          X\n        </button>\n      </div>\n    </div>\n  );\n}\n\nLayout.propTypes = {\n  item: ImmutablePropTypes.contains({\n    name: PropTypes.string,\n    description: PropTypes.string,\n    type: PropTypes.string,\n    createdAt: PropTypes.number,\n    id: PropTypes.string,\n  }),\n  name: PropTypes.string,\n  isCompleted: PropTypes.bool,\n  onRemoveItem: PropTypes.func,\n  handleChange: PropTypes.func,\n  handleBlur: PropTypes.func,\n  handleKeyDown: PropTypes.func,\n  handleCheck: PropTypes.func,\n  onOpenEditPanel: PropTypes.func,\n};\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { fromJS } from 'immutable';\nimport Layout from './layout';\nimport { updateItem, removeItem, openEditPanel } from '../../redux/actions';\n\nclass Item extends Component {\n  constructor(props) {\n    super(props);\n\n    const name = props.item.get('name');\n    const isCompleted = props.item.get('isCompleted');\n    this.state = {\n      name,\n      isCompleted,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const name = this.props.item.get('name');\n    const isCompleted = this.props.item.get('isCompleted');\n\n    if (prevProps.item.get('name') !== name) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ name });\n    }\n    if (prevProps.item.get('isCompleted') !== isCompleted) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ isCompleted });\n    }\n  }\n\n  handleChange = e => {\n    this.setState({\n      name: e.target.value,\n    });\n  };\n\n  handleUpdate = () => {\n    const { item, onUpdateItem } = this.props;\n    const { name } = this.state;\n    /**\n     * Avoiding firing update event twice\n     * if user already pressed enter\n     */\n    if (item.get('name') !== name) {\n      onUpdateItem(item.get('id'), fromJS({ name }));\n    }\n  };\n\n  handleBlur = () => {\n    this.handleUpdate();\n  };\n\n  handleKeyDown = ({ keyCode }) => {\n    /**\n     * User pressed the enter key, update the input\n     * and global state\n     */\n    if (keyCode === 13) {\n      this.handleUpdate();\n    }\n  };\n\n  handleCheck = () => {\n    const { item, onUpdateItem } = this.props;\n    const { isCompleted } = this.state;\n    onUpdateItem(\n      item.get('id'),\n      fromJS({\n        isCompleted: !isCompleted,\n      }),\n    );\n    this.setState(prevState => ({\n      isCompleted: !prevState.isCompleted,\n    }));\n  };\n\n  // handleEdit = () => {\n  //   const { item } = this.props;\n  //   this.props.history.push(`/edit/${item.id}`);\n  // };\n\n  render() {\n    const { item, onRemoveItem, onOpenEditPanel } = this.props;\n    const { name, isCompleted } = this.state;\n\n    return (\n      <Layout\n        item={item}\n        name={name}\n        isCompleted={isCompleted}\n        onRemoveItem={onRemoveItem}\n        handleChange={this.handleChange}\n        handleBlur={this.handleBlur}\n        handleKeyDown={this.handleKeyDown}\n        handleCheck={this.handleCheck}\n        onOpenEditPanel={onOpenEditPanel}\n        handleSubmit={this.handleSubmit}\n      />\n    );\n  }\n}\n\nItem.propTypes = {\n  item: ImmutablePropTypes.contains({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    isCompleted: PropTypes.bool,\n  }),\n  onRemoveItem: PropTypes.func,\n  onUpdateItem: PropTypes.func,\n  onOpenEditPanel: PropTypes.func,\n};\n\nconst actions = {\n  onUpdateItem: updateItem,\n  onRemoveItem: removeItem,\n  onOpenEditPanel: openEditPanel,\n};\n\nexport default connect(null, actions)(Item);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Item from '../Item';\n\nfunction Layout(props) {\n  const { items, checkedAll, handleCheck, ...rest } = props;\n  return (\n    <div className=\"rTable\">\n      <div className=\"rTableHeading\">\n        <div className=\"rTableHead\">\n          <span>ID</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>Name</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>Type</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>Description</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>Created at</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>\n            Completed\n            <input type=\"checkbox\" name=\"checkedAll\" checked={checkedAll} onChange={handleCheck} />\n          </span>\n        </div>\n        <div className=\"rTableHead rTableAction\">&nbsp;</div>\n      </div>\n\n      <div className=\"rTableBody\">\n        {items.map(item => (\n          <Item key={item.get('id')} item={item} {...rest} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nLayout.propTypes = {\n  items: ImmutablePropTypes.listOf(\n    ImmutablePropTypes.contains({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    }),\n  ),\n  checkedAll: PropTypes.bool,\n  handleCheck: PropTypes.func,\n};\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Layout from './layout';\n\nimport { getAllItems } from '../../redux/selectors';\nimport { toggleAll } from '../../redux/actions';\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      checkedAll: false,\n    };\n  }\n\n  handleCheck = () => {\n    const { checkedAll } = this.state;\n    this.props.onToggleAll(!checkedAll);\n\n    this.setState(prevState => ({\n      checkedAll: !prevState.checkedAll,\n    }));\n  };\n\n  render() {\n    const { checkedAll } = this.state;\n    const { items, ...rest } = this.props;\n\n    return <Layout items={items} checkedAll={checkedAll} handleCheck={this.handleCheck} {...rest} />;\n  }\n}\n\nList.propTypes = {\n  items: ImmutablePropTypes.listOf(\n    ImmutablePropTypes.contains({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    }),\n  ),\n  onToggleAll: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  items: getAllItems(state),\n});\n\nconst actions = {\n  onToggleAll: toggleAll,\n};\n\nexport default connect(mapStateToProps, actions)(List);\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n\nimport React from 'react';\nimport { Field } from 'redux-form/immutable';\nimport PropTypes from 'prop-types';\nimport { taskTypes } from '../../utils';\n\nfunction Layout(props) {\n  const { key, handleSubmit, pristine, reset, submitting } = props;\n\n  return (\n    <form onSubmit={handleSubmit} key={key} autoComplete=\"off\">\n      <label htmlFor=\"name\">\n        <span className=\"required\">Name:</span>\n        <Field name=\"name\" component=\"input\" type=\"text\" placeholder=\"Enter a task name...\" />\n      </label>\n\n      <label htmlFor=\"type\">\n        <span className=\"required\">Pick task type:</span>\n        <Field name=\"type\" component=\"select\">\n          <option value=\"\" disabled>\n            Select a type...\n          </option>\n          {taskTypes.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Field>\n      </label>\n\n      <label htmlFor=\"description\">\n        <span>Description:</span>\n        <Field name=\"description\" component=\"textarea\" placeholder=\"Add a description...\" cols=\"30\" rows=\"5\" />\n      </label>\n\n      <div className=\"actions-inline\">\n        <input type=\"submit\" value=\"Submit\" disabled={pristine || submitting} />\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\n          Clear Values\n        </button>\n      </div>\n    </form>\n  );\n}\n\nLayout.propTypes = {\n  key: PropTypes.string,\n  handleSubmit: PropTypes.func,\n  pristine: PropTypes.bool,\n  reset: PropTypes.func,\n  submitting: PropTypes.bool,\n};\n\nexport default Layout;\n","import { connect } from 'react-redux';\nimport { reduxForm } from 'redux-form/immutable';\nimport { fromJS } from 'immutable';\nimport Layout from './layout';\nimport { formSubmit } from '../../redux/actions';\n\nconst mapStateToProps = () => ({\n  key: 'form:create',\n  initialValues: fromJS({}),\n});\n\nconst Form = reduxForm({\n  form: 'form:create',\n  onSubmit: (values, dispatch) => dispatch(formSubmit('create', values)),\n  destroyOnUnmount: true,\n})(Layout);\n\nconst ConnectedForm = connect(mapStateToProps)(Form);\n\nexport default ConnectedForm;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n\nimport React from 'react';\nimport { Field } from 'redux-form/immutable';\nimport PropTypes from 'prop-types';\nimport { taskTypes } from '../../utils';\n\nfunction Layout(props) {\n  const { key, selectedItemId, handleSubmit, pristine, reset, submitting } = props;\n\n  return (\n    <form onSubmit={handleSubmit} key={key} autoComplete=\"off\">\n      <label htmlFor=\"id\">\n        <span>ID:</span>\n        <span>{selectedItemId}</span>\n      </label>\n\n      <label htmlFor=\"name\">\n        <span className=\"required\">Name:</span>\n        <Field name=\"name\" component=\"input\" type=\"text\" placeholder=\"Enter a task name...\" />\n      </label>\n\n      <label htmlFor=\"type\">\n        <span className=\"required\">Pick task type:</span>\n        <Field name=\"type\" component=\"select\">\n          <option value=\"\" disabled>\n            Select a type...\n          </option>\n          {taskTypes.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Field>\n      </label>\n\n      <label htmlFor=\"description\">\n        <span>Description:</span>\n        <Field name=\"description\" component=\"textarea\" placeholder=\"Add a description...\" cols=\"30\" rows=\"5\" />\n      </label>\n\n      <label className=\"label-checkbox\" htmlFor=\"isCompleted\">\n        <span>Is completed?</span>\n        <Field name=\"isCompleted\" component=\"input\" type=\"checkbox\" className=\"a11y-hidden\" />\n      </label>\n\n      <div className=\"actions-inline\">\n        <input type=\"submit\" value=\"Submit\" disabled={pristine || submitting} />\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\n          Clear Values\n        </button>\n      </div>\n    </form>\n  );\n}\n\nLayout.propTypes = {\n  key: PropTypes.string,\n  selectedItemId: PropTypes.string,\n  handleSubmit: PropTypes.func,\n  pristine: PropTypes.bool,\n  reset: PropTypes.func,\n  submitting: PropTypes.bool,\n};\n\nexport default Layout;\n","import { connect } from 'react-redux';\nimport { reduxForm } from 'redux-form/immutable';\nimport Layout from './layout';\nimport { formSubmit } from '../../redux/actions';\nimport { getSelectedItemId, getSelectedItem } from '../../redux/selectors';\n\nconst mapStateToProps = state => ({\n  form: `form:${getSelectedItemId(state)}`,\n  key: `form:${getSelectedItemId(state)}`,\n  initialValues: getSelectedItem(state),\n  selectedItemId: getSelectedItemId(state),\n});\n\nconst Form = reduxForm({\n  onSubmit: (values, dispatch) => dispatch(formSubmit('edit', values)),\n  destroyOnUnmount: true,\n})(Layout);\n\nconst ConnectedForm = connect(mapStateToProps)(Form);\n\nexport default ConnectedForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SidePanel(props) {\n  const { handleClose, children } = props;\n  return (\n    <div className=\"App-sidepanel\">\n      <button type=\"button\" className=\"close-panel\" onClick={handleClose}>\n        X\n      </button>\n      {children}\n    </div>\n  );\n}\nSidePanel.propTypes = {\n  children: PropTypes.shape({}),\n  handleClose: PropTypes.func,\n};\n\nexport default SidePanel;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport List from '../List';\nimport Create from '../Create';\nimport Edit from '../Edit';\nimport SidePanel from '../../components/SidePanel';\n\nfunction Layout(props) {\n  const {\n    name,\n    handleInputChange,\n    handleSubmit,\n    renderCreate,\n    renderEdit,\n    selectedItemId,\n    onClearList,\n    onClosePanel,\n    onOpenCreatePanel,\n  } = props;\n\n  return (\n    <div className=\"App-main\">\n      <div className=\"App-list\">\n        <header>\n          <form onSubmit={handleSubmit} className=\"form-inline\" autoComplete=\"off\">\n            <input type=\"text\" name=\"name\" placeholder=\"Enter a text...\" value={name} onChange={handleInputChange} />\n            <input type=\"submit\" value=\"Add\" />\n\n            <button type=\"button\" onClick={onOpenCreatePanel}>\n              Create\n            </button>\n\n            <button type=\"button\" onClick={onClearList}>\n              Clear List\n            </button>\n          </form>\n        </header>\n\n        <div className=\"rTable-container\">\n          <List />\n        </div>\n      </div>\n\n      {renderCreate && (\n        <SidePanel handleClose={onClosePanel}>\n          <Create />\n        </SidePanel>\n      )}\n      {renderEdit && selectedItemId && (\n        <SidePanel handleClose={onClosePanel}>\n          <Edit key={selectedItemId} />\n        </SidePanel>\n      )}\n    </div>\n  );\n}\n\nLayout.propTypes = {\n  renderCreate: PropTypes.bool,\n  renderEdit: PropTypes.bool,\n  selectedItemId: PropTypes.string,\n  handleSubmit: PropTypes.func,\n  name: PropTypes.string,\n  handleInputChange: PropTypes.func,\n  onClearList: PropTypes.func,\n  onClosePanel: PropTypes.func,\n  onOpenCreatePanel: PropTypes.func,\n};\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport { fromJS } from 'immutable';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { v1 as uuid } from 'uuid';\n\nimport { getSelectedItemId, getRenderCreate, getRenderEdit } from '../../redux/selectors';\nimport { addItem, closePanel, clearList, openCreatePanel } from '../../redux/actions';\nimport Layout from './layout';\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      name: '',\n    };\n  }\n\n  handleInputChange = e => {\n    this.setState({\n      name: e.target.value,\n    });\n  };\n\n  handleSubmit = e => {\n    /**\n     * We prevent page from refreshing\n     */\n    e.preventDefault();\n\n    const { name } = this.state;\n\n    /**\n     * Text is empty, clean and return\n     */\n    if (name.trim() === '') {\n      this.setState({\n        name: '',\n      });\n      return;\n    }\n\n    /**\n     * New item with default data\n     */\n    const newItem = fromJS({\n      id: uuid(),\n      name,\n      description: '',\n      type: 'daily-task',\n      createdAt: Date.now(),\n      isCompleted: false,\n    });\n    /**\n     * We call the handler for new items and pass\n     * an object with new task and key\n     */\n    this.props.onAddItem(newItem);\n\n    this.setState({\n      name: '',\n    });\n  };\n\n  render() {\n    const { name } = this.state;\n    const { renderCreate, renderEdit, selectedItemId, onClearList, onClosePanel, onOpenCreatePanel } = this.props;\n\n    return (\n      <Layout\n        name={name}\n        handleInputChange={this.handleInputChange}\n        handleSubmit={this.handleSubmit}\n        renderCreate={renderCreate}\n        renderEdit={renderEdit}\n        selectedItemId={selectedItemId}\n        onClearList={onClearList}\n        onClosePanel={onClosePanel}\n        onOpenCreatePanel={onOpenCreatePanel}\n      />\n    );\n  }\n}\n\nMain.propTypes = {\n  renderCreate: PropTypes.bool,\n  renderEdit: PropTypes.bool,\n  selectedItemId: PropTypes.string,\n  onAddItem: PropTypes.func,\n  onClearList: PropTypes.func,\n  onClosePanel: PropTypes.func,\n  onOpenCreatePanel: PropTypes.func,\n};\n\nconst mapStateToProps = state => ({\n  renderCreate: getRenderCreate(state),\n  renderEdit: getRenderEdit(state),\n  selectedItemId: getSelectedItemId(state),\n});\n\nconst actions = {\n  onAddItem: addItem,\n  onClearList: clearList,\n  onClosePanel: closePanel,\n  onOpenCreatePanel: openCreatePanel,\n};\n\nexport default connect(mapStateToProps, actions)(Main);\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div className=\"content-not-found\">\n      <h1>Not Found</h1>\n;\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\n\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\n\nimport Main from '../containers/Main';\nimport Create from '../containers/Create';\nimport Edit from '../containers/Edit';\nimport NotFound from './NotFound';\n\nfunction Router() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/\" component={Main} exact />\n        <Route path=\"/home\" component={Main} exact />\n        <Route path=\"/new\" component={Create} exact />\n        <Route path=\"/edit/:id\" component={Edit} exact />\n        <Route component={NotFound} />\n        <Redirect to=\"/home\" />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default Router;\n","import React from 'react';\n\nimport Router from './components/Router';\n\nimport logo from './assets/image/logo.svg';\nimport './assets/css/App.css';\nimport './assets/css/table.css';\nimport './assets/css/form.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </a>\n      </header>\n\n      <Router />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}