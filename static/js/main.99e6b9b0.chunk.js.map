{"version":3,"sources":["assets/image/logo.svg","redux/constants/index.js","redux/reducers/appReducer.js","redux/reducers/index.js","redux/store/index.js","utils/index.js","containers/Item/layout.js","containers/Item/index.js","containers/List/layout.js","containers/List/index.js","containers/Create/layout.js","redux/actions/index.js","containers/Create/index.js","containers/Edit/layout.js","redux/selectors/index.js","containers/Edit/index.js","components/SidePanel.js","containers/Main/index.js","components/NotFound.js","components/Router.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ADD_ITEM","UPDATE_ITEM","REMOVE_ITEM","SET_SELECTED_ITEM_ID","SET_RENDER_CREATE","SET_RENDER_EDIT","CLOSE_PANEL","CLEAR_LIST","TOGGLE_ALL","OPEN_CREATE_PANEL","OPEN_EDIT_PANEL","initialState","fromJS","items","id","name","description","type","createdAt","isCompleted","renderCreate","renderEdit","selectedItemId","getItemIndex","state","entity","itemId","get","findIndex","item","appReducer","action","ACTIONS","update","unshift","payload","itemIndex","updateIn","merge","deleteIn","set","List","map","bool","reducers","combineReducers","app","form","formReducer","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","taskTypes","value","label","Layout","props","onRemoveItem","handleChange","handleBlur","handleKeyDown","handleCheck","handleEdit","className","placeholder","onChange","onBlur","onKeyDown","replace","match","toUpperCase","moment","format","checked","onClick","Item","e","setState","target","onUpdateItem","keyCode","prevState","prevProps","this","handleSubmit","Component","withRouter","toggleAll","rest","key","onToggleAll","pristine","reset","submitting","onSubmit","autoComplete","htmlFor","component","disabled","option","cols","rows","formSubmit","updateItem","addItem","uuid","Date","now","Form","reduxForm","values","dispatch","destroyOnUnmount","ConnectedForm","connect","initialValues","getAllItems","getIn","getSelectedItemId","getSelectedItem","find","getRenderCreate","getRenderEdit","SidePanel","handleClose","children","Main","handleInputChange","currentItem","handleAddItem","preventDefault","trim","newItem","onAddItem","mainInput","ref","onOpenCreatePanel","onClearList","onOpenEditPanel","onClosePanel","Create","Edit","selectedItem","removeItem","openEditPanel","NotFound","Router","path","exact","to","App","src","logo","alt","href","rel","Boolean","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.99e6b9b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","/**\n * action-types\n */\n\nexport const FORM_SUBMIT = 'app/MainApplication/FORM_SUBMIT';\n\nexport const ADD_ITEM = 'app/MainApplication/ADD_ITEM';\n\nexport const UPDATE_ITEM = 'app/MainApplication/UPDATE_ITEM';\n\nexport const REMOVE_ITEM = 'app/MainApplication/REMOVE_ITEM';\n\nexport const SET_SELECTED_ITEM_ID = 'app/MainApplication/SET_SELECTED_ITEM_ID';\n\nexport const SET_RENDER_CREATE = 'app/MainApplication/SET_RENDER_CREATE';\n\nexport const SET_RENDER_EDIT = 'app/MainApplication/SET_RENDER_EDIT';\n\nexport const CLOSE_PANEL = 'app/MainApplication/CLOSE_PANEL';\n\nexport const CLEAR_LIST = 'app/MainApplication/CLEAR_LIST';\n\nexport const TOGGLE_ALL = 'app/MainApplication/TOGGLE_ALL';\n\nexport const OPEN_CREATE_PANEL = 'app/MainApplication/OPEN_CREATE_PANEL';\n\nexport const OPEN_EDIT_PANEL = 'app/MainApplication/OPEN_EDIT_PANEL';\n","import { fromJS, List } from 'immutable';\nimport * as ACTIONS from '../constants';\n\nconst initialState = fromJS({\n  items: [\n    {\n      id: '6b7d54a2-caff-11ea-87d0-0242ac130003',\n      name: 'Learn how to code',\n      description: 'Spend two hours a day coding',\n      type: 'dev-task',\n      createdAt: 1578831166000,\n      isCompleted: false,\n    },\n    {\n      id: '8e0f82ec-caff-11ea-87d0-0242ac130003',\n      name: 'Learn how to cook',\n      description: 'Stop eating cereal all day',\n      type: 'daily-task',\n      createdAt: 1574104366000,\n      isCompleted: false,\n    },\n    {\n      id: 'b033cb6e-ccb0-11ea-87d0-0242ac130003',\n      name: 'Take out the trash',\n      description: \"Do at least that for God's sake\",\n      type: 'daily-task',\n      createdAt: 1549069931000,\n      isCompleted: true,\n    },\n    {\n      id: '66d8e256-d20a-11ea-87d0-0242ac130003',\n      name: 'Wash the dishes',\n      description: 'Or you can eat from the can, your call',\n      type: 'daily-task',\n      createdAt: 1594455449000,\n      isCompleted: false,\n    },\n  ],\n  renderCreate: false,\n  renderEdit: false,\n  selectedItemId: '',\n});\n\nconst getItemIndex = (state, entity, itemId) => state.get(entity).findIndex(item => item.get('id') === itemId);\n\nfunction appReducer(state = initialState, action) {\n  switch (action.type) {\n    case ACTIONS.ADD_ITEM: {\n      return state.update('items', items => items.unshift(action.payload));\n    }\n\n    case ACTIONS.UPDATE_ITEM: {\n      const itemIndex = getItemIndex(state, 'items', action.id);\n      return state.updateIn(['items', itemIndex], item => item.merge(action.payload));\n    }\n\n    case ACTIONS.REMOVE_ITEM: {\n      const itemIndex = getItemIndex(state, 'items', action.id);\n      if (state.get('selectedItemId') === action.id) {\n        return state.deleteIn(['items', itemIndex]).set('renderEdit', false).set('selectedItemId', '');\n      }\n      return state.deleteIn(['items', itemIndex]);\n    }\n\n    case ACTIONS.SET_SELECTED_ITEM_ID: {\n      return state.set('selectedItemId', action.id);\n    }\n\n    case ACTIONS.SET_RENDER_CREATE: {\n      return state.set('renderCreate', action.payload);\n    }\n\n    case ACTIONS.SET_RENDER_EDIT: {\n      return state.set('renderEdit', action.payload);\n    }\n\n    case ACTIONS.OPEN_CREATE_PANEL: {\n      return state.set('renderCreate', true).set('renderEdit', false).set('selectedItemId', '');\n    }\n\n    case ACTIONS.OPEN_EDIT_PANEL: {\n      return state.set('renderCreate', false).set('renderEdit', true).set('selectedItemId', action.id);\n    }\n\n    case ACTIONS.CLOSE_PANEL: {\n      return state.set('renderCreate', false).set('renderEdit', false).set('selectedItemId', '');\n    }\n\n    case ACTIONS.CLEAR_LIST: {\n      return state.set('items', new List([]));\n    }\n\n    case ACTIONS.TOGGLE_ALL: {\n      return state.update('items', items => items.map(item => item.set('isCompleted', action.bool)));\n    }\n\n    default:\n      return state;\n  }\n}\n\nexport default appReducer;\n","import { combineReducers } from 'redux-immutable';\nimport { reducer as formReducer } from 'redux-form/immutable';\n\nimport appReducer from './appReducer';\n\nconst reducers = combineReducers({\n  app: appReducer,\n  // you have to pass formReducer under 'form' key,\n  // for custom keys look up the docs for 'getFormState'\n  form: formReducer,\n});\n\nexport default reducers;\n","import { createStore } from 'redux';\nimport reducers from '../reducers';\n\n/* eslint-disable no-underscore-dangle */\nconst store = createStore(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\n/* eslint-enable */\n\nexport default store;\n","export function humanize(str) {\n  return str\n    .replace(/^[\\s_]+|[\\s_]+$/g, '')\n    .replace(/[_\\s]+/g, ' ')\n    .replace(/[-\\s]+/g, ' ')\n    .replace(/^[a-z]/, match => match.toUpperCase());\n}\n\nexport const taskTypes = [\n  { value: 'dev-task', label: 'Development task' },\n  { value: 'daily-task', label: 'Daily task' },\n  { value: 'routine', label: 'Routine' },\n  { value: 'incidentals', label: 'Incidentals' },\n  { value: 'projects', label: 'Projects' },\n  { value: 'problems', label: 'Problems' },\n  { value: 'researching', label: 'Researching' },\n  { value: 'testing', label: 'Testing' },\n];\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport moment from 'moment';\nimport { humanize } from '../../utils';\nfunction Layout(props) {\n  const {\n    item,\n    name,\n    isCompleted,\n    onRemoveItem,\n    handleChange,\n    handleBlur,\n    handleKeyDown,\n    handleCheck,\n    handleEdit,\n  } = props;\n\n  return (\n    <div className=\"rTableRow\">\n      <div className=\"rTableCell\">\n        <span>{item.get('id')}</span>\n      </div>\n      <div className=\"rTableCell\">\n        <span>\n          {isCompleted ? (\n            <span className=\"item-completed\">{item.get('name')}</span>\n          ) : (\n            <input\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter a task name...\"\n              value={name}\n              onChange={handleChange}\n              onBlur={handleBlur}\n              onKeyDown={handleKeyDown}\n            />\n          )}\n        </span>\n      </div>\n      <div className=\"rTableCell\">\n        <span>{humanize(item.get('type'))}</span>\n      </div>\n      <div className=\"rTableCell\">\n        <span>{item.get('description')}</span>\n      </div>\n      <div className=\"rTableCell\">\n        <span>{moment(item.get('createdAt')).format('lll')}</span>\n      </div>\n      <div className=\"rTableCell rTableAction\">\n        <span>\n          <input type=\"checkbox\" name=\"isCompleted\" checked={isCompleted} onChange={handleCheck} />\n        </span>\n      </div>\n      <div className=\"rTableCell rTableAction\">\n        <button type=\"button\" onClick={() => handleEdit(item.get('id'))}>\n          Edit\n        </button>\n        <button type=\"button\" onClick={() => onRemoveItem(item.get('id'))}>\n          X\n        </button>\n      </div>\n    </div>\n  );\n}\n\nLayout.propTypes = {\n  item: ImmutablePropTypes.contains({\n    name: PropTypes.string,\n    description: PropTypes.string,\n    type: PropTypes.string,\n    createdAt: PropTypes.number,\n    id: PropTypes.string,\n  }),\n  name: PropTypes.string,\n  isCompleted: PropTypes.bool,\n  onRemoveItem: PropTypes.func,\n  handleChange: PropTypes.func,\n  handleBlur: PropTypes.func,\n  handleKeyDown: PropTypes.func,\n  handleCheck: PropTypes.func,\n  handleEdit: PropTypes.func,\n};\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { fromJS } from 'immutable';\nimport Layout from './layout';\n\nclass Item extends Component {\n  constructor(props) {\n    super(props);\n\n    const name = props.item.get('name');\n    const isCompleted = props.item.get('isCompleted');\n    this.state = {\n      name,\n      isCompleted,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    const name = this.props.item.get('name');\n    const isCompleted = this.props.item.get('isCompleted');\n\n    if (prevProps.item.get('name') !== name) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ name });\n    }\n    if (prevProps.item.get('isCompleted') !== isCompleted) {\n      // eslint-disable-next-line react/no-did-update-set-state\n      this.setState({ isCompleted });\n    }\n  }\n\n  handleChange = e => {\n    this.setState({\n      name: e.target.value,\n    });\n  };\n\n  handleBlur = () => {\n    const { item, onUpdateItem } = this.props;\n    const { name } = this.state;\n    /**\n     * Avoiding firing update event twice\n     * if user already pressed enter\n     */\n    if (item.get('name') !== name) {\n      onUpdateItem(item.get('id'), fromJS({ name }));\n    }\n  };\n\n  handleKeyDown = ({ keyCode }) => {\n    /**\n     * User pressed the enter key, update the input\n     * and global state\n     */\n    if (keyCode === 13) {\n      const { item, onUpdateItem } = this.props;\n      const { name } = this.state;\n      if (item.get('name') !== name) {\n        onUpdateItem(item.get('id'), fromJS({ name }));\n      }\n    }\n  };\n\n  handleCheck = () => {\n    const { item, onUpdateItem } = this.props;\n    const { isCompleted } = this.state;\n    onUpdateItem(\n      item.get('id'),\n      fromJS({\n        isCompleted: !isCompleted,\n      }),\n    );\n    this.setState(prevState => ({\n      isCompleted: !prevState.isCompleted,\n    }));\n  };\n\n  // handleEdit = () => {\n  //   const { item } = this.props;\n  //   this.props.history.push(`/edit/${item.id}`);\n  // };\n\n  render() {\n    const { item, onRemoveItem, handleEdit } = this.props;\n    const { name, isCompleted } = this.state;\n\n    return (\n      <Layout\n        item={item}\n        name={name}\n        isCompleted={isCompleted}\n        onRemoveItem={onRemoveItem}\n        handleChange={this.handleChange}\n        handleBlur={this.handleBlur}\n        handleKeyDown={this.handleKeyDown}\n        handleCheck={this.handleCheck}\n        handleEdit={handleEdit}\n        handleSubmit={this.handleSubmit}\n      />\n    );\n  }\n}\n\nItem.propTypes = {\n  item: ImmutablePropTypes.contains({\n    name: PropTypes.string,\n    id: PropTypes.string,\n    isCompleted: PropTypes.bool,\n  }),\n  onRemoveItem: PropTypes.func,\n  onUpdateItem: PropTypes.func,\n  handleEdit: PropTypes.func,\n};\n\nexport default withRouter(Item);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Item from '../Item';\n\nfunction Layout(props) {\n  const { items, toggleAll, handleCheck, ...rest } = props;\n  return (\n    <div className=\"rTable\">\n      <div className=\"rTableHeading\">\n        <div className=\"rTableHead\">\n          <span>ID</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>Name</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>Type</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>Description</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>Created at</span>\n        </div>\n        <div className=\"rTableHead\">\n          <span>\n            Completed\n            <input type=\"checkbox\" name=\"toggleAll\" checked={toggleAll} onChange={handleCheck} />\n          </span>\n        </div>\n        <div className=\"rTableHead rTableAction\">&nbsp;</div>\n      </div>\n\n      <div className=\"rTableBody\">\n        {items.map(item => (\n          <Item key={item.get('id')} item={item} {...rest} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nLayout.propTypes = {\n  items: ImmutablePropTypes.listOf(\n    ImmutablePropTypes.contains({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    }),\n  ),\n  toggleAll: PropTypes.bool,\n  handleCheck: PropTypes.func,\n};\n\nexport default Layout;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport Layout from './layout';\n\nclass List extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      toggleAll: false,\n    };\n  }\n\n  handleCheck = () => {\n    const { toggleAll } = this.state;\n    this.props.onToggleAll(!toggleAll);\n\n    this.setState(prevState => ({\n      toggleAll: !prevState.toggleAll,\n    }));\n  };\n\n  render() {\n    const { toggleAll } = this.state;\n    const { items, ...rest } = this.props;\n\n    return <Layout items={items} toggleAll={toggleAll} handleCheck={this.handleCheck} {...rest} />;\n  }\n}\n\nList.propTypes = {\n  items: ImmutablePropTypes.listOf(\n    ImmutablePropTypes.contains({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    }),\n  ),\n  onToggleAll: PropTypes.func,\n};\n\nexport default List;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n\nimport React from 'react';\nimport { Field } from 'redux-form/immutable';\nimport PropTypes from 'prop-types';\nimport { taskTypes } from '../../utils';\n\nfunction Layout(props) {\n  const { key, handleSubmit, pristine, reset, submitting } = props;\n\n  return (\n    <form onSubmit={handleSubmit} key={key} autoComplete=\"off\">\n      <label htmlFor=\"name\">\n        <span className=\"required\">Name:</span>\n        <Field name=\"name\" component=\"input\" type=\"text\" placeholder=\"Enter a task name...\" />\n      </label>\n\n      <label htmlFor=\"type\">\n        <span className=\"required\">Pick task type:</span>\n        <Field name=\"type\" component=\"select\">\n          <option value=\"\" disabled>\n            Select a type...\n          </option>\n          {taskTypes.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Field>\n      </label>\n\n      <label htmlFor=\"description\">\n        <span>Description:</span>\n        <Field name=\"description\" component=\"textarea\" placeholder=\"Add a description...\" cols=\"30\" rows=\"5\" />\n      </label>\n\n      <div className=\"inline\">\n        <input type=\"submit\" value=\"Submit\" disabled={pristine || submitting} />\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\n          Clear Values\n        </button>\n      </div>\n    </form>\n  );\n}\n\nLayout.propTypes = {\n  key: PropTypes.string,\n  handleSubmit: PropTypes.func,\n  pristine: PropTypes.bool,\n  reset: PropTypes.func,\n  submitting: PropTypes.bool,\n};\n\nexport default Layout;\n","import { v1 as uuid } from 'uuid';\nimport * as ACTIONS from '../constants';\n\nexport function formSubmit(action, payload) {\n  if (action === 'edit') {\n    return updateItem(payload.get('id'), payload);\n  }\n\n  return addItem(payload.set('id', uuid()).set('createdAt', Date.now()).set('isCompleted', false));\n}\n\nexport function addItem(payload) {\n  return {\n    type: ACTIONS.ADD_ITEM,\n    payload,\n  };\n}\n\nexport function updateItem(id, payload) {\n  return {\n    type: ACTIONS.UPDATE_ITEM,\n    id,\n    payload,\n  };\n}\n\nexport function removeItem(id) {\n  return {\n    type: ACTIONS.REMOVE_ITEM,\n    id,\n  };\n}\n\nexport function setSelectedItemId(id) {\n  return {\n    type: ACTIONS.SET_SELECTED_ITEM_ID,\n    id,\n  };\n}\n\nexport function setRenderCreate(payload) {\n  return {\n    type: ACTIONS.SET_RENDER_CREATE,\n    payload,\n  };\n}\n\nexport function setRenderEdit(payload) {\n  return {\n    type: ACTIONS.SET_RENDER_EDIT,\n    payload,\n  };\n}\n\nexport function closePanel() {\n  return {\n    type: ACTIONS.CLOSE_PANEL,\n  };\n}\n\nexport function clearList() {\n  return {\n    type: ACTIONS.CLEAR_LIST,\n  };\n}\n\nexport function toggleAll(bool) {\n  return {\n    type: ACTIONS.TOGGLE_ALL,\n    bool,\n  };\n}\n\nexport function openCreatePanel() {\n  return {\n    type: ACTIONS.OPEN_CREATE_PANEL,\n  };\n}\n\nexport function openEditPanel(id) {\n  return {\n    type: ACTIONS.OPEN_EDIT_PANEL,\n    id,\n  };\n}\n","import { connect } from 'react-redux';\nimport { reduxForm } from 'redux-form/immutable';\nimport { fromJS } from 'immutable';\nimport Layout from './layout';\nimport { formSubmit } from '../../redux/actions';\n\nconst mapStateToProps = () => ({\n  key: 'form:create',\n  initialValues: fromJS({}),\n});\n\nconst Form = reduxForm({\n  form: 'form:create',\n  onSubmit: (values, dispatch) => dispatch(formSubmit('create', values)),\n  destroyOnUnmount: true,\n})(Layout);\n\nconst ConnectedForm = connect(mapStateToProps)(Form);\n\nexport default ConnectedForm;\n","/* eslint-disable jsx-a11y/label-has-associated-control */\n\nimport React from 'react';\nimport { Field } from 'redux-form/immutable';\nimport PropTypes from 'prop-types';\nimport { taskTypes } from '../../utils';\n\nfunction Layout(props) {\n  const { key, selectedItemId, handleSubmit, pristine, reset, submitting } = props;\n\n  return (\n    <form onSubmit={handleSubmit} key={key} autoComplete=\"off\">\n      <label htmlFor=\"id\">\n        <span>ID:</span>\n        <span>{selectedItemId}</span>\n      </label>\n\n      <label htmlFor=\"name\">\n        <span className=\"required\">Name:</span>\n        <Field name=\"name\" component=\"input\" type=\"text\" placeholder=\"Enter a task name...\" />\n      </label>\n\n      <label htmlFor=\"type\">\n        <span className=\"required\">Pick task type:</span>\n        <Field name=\"type\" component=\"select\">\n          <option value=\"\" disabled>\n            Select a type...\n          </option>\n          {taskTypes.map(option => (\n            <option key={option.value} value={option.value}>\n              {option.label}\n            </option>\n          ))}\n        </Field>\n      </label>\n\n      <label htmlFor=\"description\">\n        <span>Description:</span>\n        <Field name=\"description\" component=\"textarea\" placeholder=\"Add a description...\" cols=\"30\" rows=\"5\" />\n      </label>\n\n      <label className=\"label-checkbox\" htmlFor=\"isCompleted\">\n        <span>Is completed?</span>\n        <Field name=\"isCompleted\" component=\"input\" type=\"checkbox\" className=\"a11y-hidden\" />\n      </label>\n\n      <div className=\"inline\">\n        <input type=\"submit\" value=\"Submit\" disabled={pristine || submitting} />\n        <button type=\"button\" disabled={pristine || submitting} onClick={reset}>\n          Clear Values\n        </button>\n      </div>\n    </form>\n  );\n}\n\nLayout.propTypes = {\n  key: PropTypes.string,\n  selectedItemId: PropTypes.string,\n  handleSubmit: PropTypes.func,\n  pristine: PropTypes.bool,\n  reset: PropTypes.func,\n  submitting: PropTypes.bool,\n};\n\nexport default Layout;\n","import { List } from 'immutable';\n\nexport const getAllItems = state => state.getIn(['app', 'items'], new List([]));\n\nexport const getItem = (state, id) => state.getIn(['app', 'items'], new List([])).find(item => item.get('id') === id);\n\nexport const getSelectedItemId = state => state.getIn(['app', 'selectedItemId']);\n\nexport const getSelectedItem = state =>\n  state.getIn(['app', 'items'], new List([])).find(item => item.get('id') === getSelectedItemId(state));\n\nexport const getRenderCreate = state => state.getIn(['app', 'renderCreate'], false);\n\nexport const getRenderEdit = state => state.getIn(['app', 'renderEdit'], false);\n","import { connect } from 'react-redux';\nimport { reduxForm } from 'redux-form/immutable';\nimport Layout from './layout';\nimport { formSubmit } from '../../redux/actions';\nimport { getSelectedItemId, getSelectedItem } from '../../redux/selectors';\n\nconst mapStateToProps = state => ({\n  form: `form:${getSelectedItemId(state)}`,\n  key: `form:${getSelectedItemId(state)}`,\n  initialValues: getSelectedItem(state),\n  selectedItemId: getSelectedItemId(state),\n});\n\nconst Form = reduxForm({\n  onSubmit: (values, dispatch) => dispatch(formSubmit('edit', values)),\n  destroyOnUnmount: true,\n})(Layout);\n\nconst ConnectedForm = connect(mapStateToProps)(Form);\n\nexport default ConnectedForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SidePanel(props) {\n  const { handleClose, children } = props;\n  return (\n    <div className=\"App-sidepanel\">\n      <button type=\"button\" className=\"close-panel\" onClick={handleClose}>\n        X\n      </button>\n      {children}\n    </div>\n  );\n}\nSidePanel.propTypes = {\n  children: PropTypes.shape({}),\n  handleClose: PropTypes.func,\n};\n\nexport default SidePanel;\n","import React, { Component } from 'react';\nimport { fromJS } from 'immutable';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ImmutablePropTypes from 'react-immutable-proptypes';\nimport { v1 as uuid } from 'uuid';\n\nimport List from '../List';\nimport Create from '../Create';\nimport Edit from '../Edit';\nimport SidePanel from '../../components/SidePanel';\n\nimport { getAllItems, getSelectedItemId, getSelectedItem, getRenderCreate, getRenderEdit } from '../../redux/selectors';\nimport {\n  addItem,\n  updateItem,\n  removeItem,\n  closePanel,\n  clearList,\n  toggleAll,\n  openCreatePanel,\n  openEditPanel,\n} from '../../redux/actions';\n\nfunction mapStateToProps(state) {\n  return {\n    items: getAllItems(state),\n    renderCreate: getRenderCreate(state),\n    renderEdit: getRenderEdit(state),\n    selectedItemId: getSelectedItemId(state),\n    selectedItem: getSelectedItem(state),\n  };\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    onAddItem: item => dispatch(addItem(item)),\n    onUpdateItem: (id, item) => dispatch(updateItem(id, item)),\n    onRemoveItem: id => dispatch(removeItem(id)),\n    onClearList: () => dispatch(clearList()),\n    onToggleAll: bool => dispatch(toggleAll(bool)),\n    onClosePanel: () => dispatch(closePanel()),\n    onOpenCreatePanel: () => dispatch(openCreatePanel()),\n    onOpenEditPanel: id => dispatch(openEditPanel(id)),\n  };\n}\n\nclass Main extends Component {\n  constructor(props) {\n    super(props);\n\n    /**\n     * We use a class variable, to avoid re-rendering\n     * everytime there is a change in input value\n     */\n    this.currentItem = '';\n  }\n\n  handleInputChange = e => {\n    /**\n     * Instead of changing the state, we just\n     * change the value of class variable\n     */\n    this.currentItem = e.target.value;\n  };\n\n  handleAddItem = e => {\n    /**\n     * We prevent page from refreshing\n     */\n    e.preventDefault();\n\n    /**\n     * Text is empty, clean and return\n     */\n    if (this.currentItem.trim() === '') {\n      this.mainInput.value = '';\n      return;\n    }\n\n    /**\n     * New item with default data\n     */\n    const newItem = fromJS({\n      id: uuid(),\n      name: this.currentItem,\n      description: '',\n      type: 'daily-task',\n      createdAt: Date.now(),\n      isCompleted: false,\n    });\n    /**\n     * We call the handler for new items and pass\n     * an object with new task and key\n     */\n    this.props.onAddItem(newItem);\n\n    /**\n     * We clean class variable, to avoid adding\n     * another item if Add button is pressed\n     *\n     * Cleaning class variable doesn't clear input\n     */\n    this.currentItem = '';\n\n    /**\n     * Example of the use of \"Ref\"\n     * Clearing input after submit\n     */\n    this.mainInput.value = '';\n  };\n\n  render() {\n    return (\n      <div className=\"App-main\">\n        <div className=\"App-list\">\n          <header>\n            <form onSubmit={this.handleAddItem} className=\"form-inline\" autoComplete=\"off\">\n              <input\n                ref={ref => (this.mainInput = ref)}\n                type=\"text\"\n                placeholder=\"Enter a text...\"\n                onChange={this.handleInputChange}\n              />\n              <input type=\"submit\" value=\"Add\" />\n\n              <button type=\"button\" onClick={this.props.onOpenCreatePanel}>\n                Create\n              </button>\n\n              <button type=\"button\" onClick={this.props.onClearList}>\n                Clear List\n              </button>\n            </form>\n          </header>\n\n          <div className=\"rTable-container\">\n            <List\n              items={this.props.items}\n              onUpdateItem={this.props.onUpdateItem}\n              onRemoveItem={this.props.onRemoveItem}\n              onToggleAll={this.props.onToggleAll}\n              handleEdit={this.props.onOpenEditPanel}\n            />\n          </div>\n        </div>\n\n        {this.props.renderCreate && (\n          <SidePanel handleClose={this.props.onClosePanel}>\n            <Create />\n          </SidePanel>\n        )}\n        {this.props.renderEdit && this.props.selectedItemId && (\n          <SidePanel handleClose={this.props.onClosePanel}>\n            <Edit key={this.props.selectedItemId} />\n          </SidePanel>\n        )}\n      </div>\n    );\n  }\n}\n\nMain.propTypes = {\n  items: ImmutablePropTypes.listOf(\n    ImmutablePropTypes.contains({\n      name: PropTypes.string,\n      id: PropTypes.string,\n    }),\n  ),\n  renderCreate: PropTypes.bool,\n  renderEdit: PropTypes.bool,\n  selectedItemId: PropTypes.string,\n  onAddItem: PropTypes.func,\n  onUpdateItem: PropTypes.func,\n  onRemoveItem: PropTypes.func,\n  onClearList: PropTypes.func,\n  onToggleAll: PropTypes.func,\n  onClosePanel: PropTypes.func,\n  onOpenCreatePanel: PropTypes.func,\n  onOpenEditPanel: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main);\n","import React from 'react';\n\nfunction NotFound() {\n  return (\n    <div className=\"content-not-found\">\n      <h1>Not Found</h1>\n;\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\n\nimport { HashRouter, Route, Switch, Redirect } from 'react-router-dom';\n\nimport Main from '../containers/Main';\nimport Create from '../containers/Create';\nimport Edit from '../containers/Edit';\nimport NotFound from './NotFound';\n\nfunction Router() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/\" component={Main} exact />\n        <Route path=\"/home\" component={Main} exact />\n        <Route path=\"/new\" component={Create} exact />\n        <Route path=\"/edit/:id\" component={Edit} exact />\n        <Route component={NotFound} />\n        <Redirect to=\"/home\" />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default Router;\n","import React from 'react';\n\nimport Router from './components/Router';\n\nimport logo from './assets/image/logo.svg';\nimport './assets/css/App.css';\nimport './assets/css/table.css';\nimport './assets/css/form.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <a className=\"App-link\" href=\"https://reactjs.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn React\n        </a>\n      </header>\n\n      <Router />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/css/index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}